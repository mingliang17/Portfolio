/*
    Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import gsap from 'gsap';
import { useEffect, useRef, useState } from 'react';
import { Float, useGLTF } from '@react-three/drei';
import * as THREE from 'three';

// Custom hook to load texture without causing render-phase updates
const useTextureLoader = (path) => {
  const [texture, setTexture] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let mounted = true;
    const loader = new THREE.TextureLoader();

    loader.load(
      path,
      (loadedTexture) => {
        if (mounted) {
          setTexture(loadedTexture);
          setLoading(false);
        }
      },
      undefined,
      (error) => {
        console.error('Error loading texture:', error);
        if (mounted) {
          setLoading(false);
        }
      }
    );

    return () => {
      mounted = false;
    };
  }, [path]);

  return { texture, loading };
};

const Cube = ({ ...props }) => {
  const { nodes } = useGLTF('/models/cube.glb');

  // Use custom texture loader instead of useTexture
  const { texture } = useTextureLoader('textures/cube.png');

  const cubeRef = useRef();
  const [hovered, setHovered] = useState(false);

  useEffect(() => {
    if (!cubeRef.current) return;

    const timeline = gsap
      .timeline({
        repeat: -1,
        repeatDelay: 0.5,
      })
      .to(cubeRef.current.rotation, {
        y: hovered ? '+=2' : `+=${Math.PI * 2}`,
        x: hovered ? '+=2' : `-=${Math.PI * 2}`,
        duration: 2.5,
        stagger: {
          each: 0.15,
        },
      });

    return () => {
      timeline.kill();
    };
  }, [hovered]);

  return (
    <Float floatIntensity={2}>
      <group position={[9, -4, 0]} rotation={[2.6, 0.8, -1.8]} scale={0.74} dispose={null} {...props}>
        <mesh
          ref={cubeRef}
          castShadow
          receiveShadow
          geometry={nodes.Cube.geometry}
          material={nodes.Cube.material}
          onPointerEnter={() => setHovered(true)}
          onPointerLeave={() => setHovered(false)}
        >
          {texture && (
            <meshMatcapMaterial matcap={texture} toneMapped={false} />
          )}
        </mesh>
      </group>
    </Float>
  );
};

useGLTF.preload('/models/cube.glb');

export default Cube;